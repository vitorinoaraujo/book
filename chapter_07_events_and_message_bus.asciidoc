[[chapter_07_events_and_message_bus]]
== Events and the Message Bus

.In this chapter
********************************************************************************

//TODO get rid of bullets

* We'll examine the kind of requirement that leads to a _big ball of mud_.
* We'll see how we can use Domain Events to separate side-effects from our
  use-cases.
* We'll show how to build a simple Message Bus for triggering behavior in
  your codebase.
* We'll see how our Unit of Work can be extended to cover multi-step processes.

TODO: DIAGRAM GOES HERE

********************************************************************************


So far we've spent a lot of time and energy on a simple problem that we could
easily have solved with Django. You might be asking if the increased testability
and expressiveness are _really_ worth all the effort.

////
TODO (ej) This chart PoEA has been helpful to me in justifying the value of modeling:
https://www.reflektis.com/blog/global-complexity-local-simplicity/
////

In practice, though, we find that it's not the obvious features that make a mess
of our codebases: it's the goop around the edge. It's reporting, and permissions
and workflows that touch a zillion objects.

Let's see how our architecture holds up once we need to plug in some of the
mundane stuff that makes up so much of our systems.

Another day, another new requirement:  when we can't allocate an order because
we're out of stock, we should alert the buying team. They'll go and fix the
problem by buying more stock, and all will be well.

For a first version, our product owner says we can just send the alert by email.

=== Avoiding Making a Mess.

==== First, Avoid Making a Mess of of our Web Controllers

When we have a new requirement like this, that's not _really_ to do with the
core domain, it's all too easy to start dumping these things into our web
controllers:

[[email_in_flask]]
.Just whack it in the endpoint, what could go wrong? (src/allocation/flask_app.py)
====
[source,python]
[role="skip"]
----
@app.route("/allocate", methods=['POST'])
def allocate_endpoint():
    line = model.OrderLine(
        request.json['orderid'],
        request.json['sku'],
        request.json['qty'],
    )
    try:
        batchref = services.allocate(line, unit_of_work.start)
    except (model.OutOfStock, services.InvalidSku) as e:
        send_mail(
            'out of stock',
            'stock_admin@made.com',
            f'{line.orderid} - {line.sku}'
        )
        return jsonify({'message': str(e)}), 400

    return jsonify({'batchref': batchref}), 201
----
====

//TODO (DS): I wonder if the code snippets for the messy ways are really
//necessary. Reading code takes up a fair amount of mental energy and really
//all you're talking about is, who's responsible? Perhaps sequence diagrams
//would be a better way of showing the different options...

////
 TODO (ej): I like the messy examples here, because they are exactly
       like things that happen in practice, and some people will do better 
       with a concrete example over a sequence diagram.

       The transitions/flow between the snippets is a bit confusing though.  

       Right now it reads like:
         ex1. whack it in the endpoint
         ex2. mocky test for send_email (after implicility whacking it into the service?)
         ex3. whack it into the model
         ex4. whack it into the service (to match the mocky test)
////

As a one-off hack, this might be okay, but it's easy to see how we can quickly
end up in a mess by patching things in this way. Sending emails isn't the job of
our HTTP layer, and we'd like to be able to unit test this new feature.

Let's start with a unit test written against our service layer.

[[mocky_test_for_send_email]]
.A Mocky test at the service layer (tests/unit/test_services.py)
====
[source,python]
[role="non-head"]
----
def test_sends_email_on_out_of_stock_error():
    uow = FakeUnitOfWork()
    services.add_batch("b1", "POPULAR-CURTAINS", 9, None, uow)

    with mock.patch("allocation.email.send_mail") as mock_send_mail:  #<1>
        with pytest.raises(exceptions.OutOfStock):
            services.allocate("o1", "POPULAR-CURTAINS", 10, uow)
        assert mock_send_mail.call_args == mock.call(  #<1>
            "stock@made.com",
            f"Out of stock for POPULAR-CURTAINS",
        )
----
====

<1> We use `unittest.mock.patch` to monkeypatch out our "real" email-sending
    function, which lives at _src/allocation/email.py_.  This may not be the best
    pattern for testing dependencies like email. In the next chapter we'll discuss
    alternative ways of approaching this.


NOTE: If you find yourself using `mock.patch` to test external dependencies
    at the service layer, you should be aware that Other Testing Options Are
    Available (TM).  See <<chapter_12_dependency_injection>>.


//TODO (DS): Do we *really* need to see this mocky test? Why not skip straight
//to the good practice?

==== ... And Let's Not Make a Mess of our Model Either

Assuming we don't want to put this code into our web controllers, because
we want them to be as thin as possible, we may look at putting it right at
the source, in the model:

[[email_in_model]]
.Email-sending code in our model isn't lovely either (src/allocation/model.py)
====
[source,python]
[role="non-head"]
----
    def allocate(self, line: OrderLine) -> str:
        try:
            batch = next(
                b for b in sorted(self.batches) if b.can_allocate(line)
            )
            #...
        except StopIteration:
            email.send_mail('stock@made.com', f'Out of stock for {line.sku}')
            raise exceptions.OutOfStock(f'Out of stock for sku {line.sku}')
----
====

But that's even worse!  We don't want our model to have any dependencies on
infrastructure concerns like `email.send_mail`.


==== Or the Service Layer!

In the service layer it's a little better, but it's still not lovely:

[[email_in_services]]
.And in the services layer it's no better (src/allocation/services.py)
====
[source,python]
[role="non-head"]
----
def allocate(
        orderid: str, sku: str, qty: int,
        uow: unit_of_work.AbstractUnitOfWork
) -> str:
    line = OrderLine(orderid, sku, qty)
    with uow:
        product = uow.products.get(sku=line.sku)
        if product is None:
            raise exceptions.InvalidSku(f'Invalid sku {line.sku}')
        try:
            batchref = product.allocate(line)
            uow.commit()
            return batchref
        except exceptions.OutOfStock:
            email.send_mail('stock@made.com', f'Out of stock for {line.sku}')
            raise
----
====

Catching an exception and re-raising it?  I mean, it could be worse, but it's
definitely making us unhappy.


=== Single Responsibility Principle

Really this is a violation of the __single responsibility principle__footnote:[
the S from https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design[SOLID]].
Our use case is allocation. Our endpoint, service function, and domain methods
are all called `allocate`, not `allocate_and_send_mail_if_out_of_stock`.

TIP: Rule of thumb: if you can't describe what your function does without using
    words like "then" or "and," you might be violating the SRP.


This email sending thing is unwelcome *goop* messing up the nice clean flow
of our system. What we'd like is to keep our domain model focused on the rule
"You can't allocate more stuff than is actually available."


The domain model's job is to know that we're out of stock, but the
responsibility of sending an alert belongs elsewhere. We should be able to turn
this feature on or off, or to switch to SMS notifications instead, without
needing to change the rules of our domain model.

We'd also like to keep the service layer free of implementation details. We
want to apply the Dependency Inversion Principle to notifications, so that our
service layer depends on an abstraction, in the same way as we avoid depending
on the database by using a UnitOfWork.


////
TODO (ej) *Maybe "weed" instead of "goop" to match the "gardening" metaphor?
     * "[F]ree of implementation details" is ambiguous and could be a confusing phrase.  
     Something like "free of volatile concerns" or "decoupled from details that are likely to change"
     would be clearer.
     *  I'm not sure that this (using events) is actaully "Dependency Inversion", strictly speaking.
        Safest thing here would be to just say "decoupling".
////

=== All Aboard the Message Bus!

The patterns we're going to introduce here are _Domain Events_ and the _Message Bus_.

First, rather than being concerned about emails, our model will be in charge of
recording "events"--facts about things that have happened. We'll use a Message
Bus to respond to events, and invoke some new operation.

==== The Model Records Events

[[domain_event]]
.The model records a domain event (src/allocation/model.py)
====
[source,python]
[role="non-head"]
----
class Product:

    def __init__(self, sku: str, batches: List[Batch], version_number: int = 0):
        self.sku = sku
        self.batches = batches
        self.version_number = version_number
        self.events = []  # type: List[events.Event]  #<1>

    def allocate(self, line: OrderLine) -> str:
        try:
            #...
        except StopIteration:
            self.events.append(events.OutOfStock(line.sku))  #<2>
            # raise exceptions.OutOfStock(f'Out of stock for sku {line.sku}')  #<3>
            return None
----
====

<1> Our Aggregate grows a `.events` attribute, where it will store facts
    about what has happened.

<2> Rather than invoking some email-sending code directly, we record those
    events at the place they occur, using only the language of the domain.

<3> We're also going to stop raising an exception for the out-of-stock
    case.  The event will do the job the exception was doing.

TIP: Exceptions and Events don't mix.  If you're implementing domain
    events, don't raise exceptions to describe the same domain concept.
    As we'll see later when we handle events in the Unit of Work, it's
    confusing to have to reason about events and exceptions together.

TODO: This ^^^ is true, but I think the real problem is that you shouldn't use
exceptions for control-of-flow. It's like a classic design smell.


==== Events Are Simple Dataclasses

//TODO (DS): Maybe worth moving this code above the previous snippet.

Events are part of our domain.  We could store them in _model.py_, but we
may as well keep them in their own file.  (this might be a good time to
consider refactoring out a directory called "domain," so we have _domain/model.py_
and _domain/events.py_).

[[events_dot_py]]
.Event classes (src/allocation/events.py)
====
[source,python]
----
from dataclasses import dataclass

class Event:  #<1>
    pass

@dataclass
class OutOfStock(Event):  #<2>
    sku: str
----
====


<1> Once we have a number of events we'll find it useful to have a parent
    class that can store common behavior.  It's also useful for type
    hints in our message bus, as we'll see shortly.

<2> `dataclasses` are great for domain events too.



==== The Message Bus Maps Events to Handlers

A message bus essentially says: when I see this event, I should
invoke the following handlers.  Here's a minimal implementation:

//TODO (DS): Maybe mention pub sub? I also think a system diagram is a good way
//of illustrating the point.

[[messagebus]]
.Simple message bus (src/allocation/messagebus.py)
====
[source,python]
----
def handle(events_: List[events.Event]):
    while events_:
        event = events_.pop(0)
        for handler in HANDLERS[type(event)]:
            handler(event)


def send_out_of_stock_notification(event: events.OutOfStock):
    email.send_mail(
        'stock@made.com',
        f'Out of stock for {event.sku}',
    )


HANDLERS = {
    events.OutOfStock: [send_out_of_stock_notification],

}  # type: Dict[Type[events.Event], List[Callable]]
----
====

//TODO: maybe handle should just take one event?


==== One Simple Option: The Service Layer Puts Events on the Message Bus

Now we need something to catch events from the model and pass them to the
message bus.  The service layer is one place you can do it...

[[service_talks_to_messagebus]]
.The service layer with an explicit message bus (src/allocation/services.py)
====
[source,python]
[role="non-head"]
----
def allocate(
        orderid: str, sku: str, qty: int,
        uow: unit_of_work.AbstractUnitOfWork
) -> str:
    line = OrderLine(orderid, sku, qty)
    with uow:
        product = uow.products.get(sku=line.sku)
        if product is None:
            raise exceptions.InvalidSku(f'Invalid sku {line.sku}')
        try:  #<1>
            batchref = product.allocate(line)
            uow.commit()
            return batchref
        finally:  #<1>
            messagebus.handle(product.events)  #<2>
----
====

<1> We keep the `try/finally` from our ugly earlier implementation,

<2> But now instead of depending directly on some email infrastructure,
    the service layer is just in charge of passing events from the model
    up to the message bus.

That already avoids some of the ugliness that we had in our naive
implementation, and we have several systems that work like this,
in which the service layer explicitly collects events from aggregates,
and passes them to the messagebus.

NOTE: Another variant on this is that you can have the message bus in charge of
    raising events directly, rather than having them raised by the
    domain model.

We'd like to show you another solution, in which we put the unit of
work in charge of collecting and raising events.

////
TODO (ej) 
     * I'm unsure what the NOTE: about message bus raising events means.
     * Some of the language/names around  "raising" vs "handling" events is fuzzy.
     Depending on how the "messagebus" is implemented, couldn't there be latency and re-ordering
     of events between the time when an event is "raised" vs. "handled"?  I'm finding the name 
     `messagebus.handle` to be a little bit confusing, as a consequence.
////

=== The Unit of Work Can Pass Events to the Message Bus

The UoW already has a `try/finally`, and it knows about all the aggregates
currently in play because it provides access to the Repository.  So it's
a good place to spot events and pass them to the message bus:

////
TODO
In Example 9. The UoW meets the Message Bus (src/allocation/unit_of_work.py), I
got stuck trying to figure out where the .seen attribute had come from.
It might be helpful to add a line explicitly introducing it before Example 9.
Once I read on to Example 10 everything cleared up immediately.

https://github.com/python-leap/book/issues/35
////

////
TODO (ej) +1 to the above comment.  Adding a little bit of indirection to make it more self-documenting
     could help, like below.  (Will require some changes to messagebus.handle, but it looks like you
     are re-considering that as well anyway?)

     Also, the `seen` variable is never purged.  Is that something to be concerned about, either
     for performance or correctness?

class AbstractRepository(abc.ABC):
    @property
    def unprocessed_events(self):
        for p in self.seen:
             evt = p.events.pop(0)
             yield evt

class AbstractUnitOfWork(abc.ABC):
    def commit(self):
        self._commit()
        messagebus.handle(self.products.unprocessed_events) 

////

[[uow_with_messagebus]]
.The UoW meets the message bus (src/allocation/unit_of_work.py)
====
[source,python]
----
class AbstractUnitOfWork(abc.ABC):
    ...

    def commit(self):
        self._commit()  #<1>
        for obj in self.products.seen:  #<2><3>
            messagebus.handle(obj.events)

    @abc.abstractmethod
    def _commit(self):
        raise NotImplementedError

...

class SqlAlchemyUnitOfWork(AbstractUnitOfWork):
    ...

    def _commit(self):  #<1>
        self.session.commit()
----
====

<1> We'll change our commit method to require a private `._commit()`
    method from subclasses

<2> After committing, we run through all the objects that our
    repository has seen and pass their events to the message bus.

<3> That relies on the repository keeping track of aggregates that it's seen,
    as we'll see in the next listing.

// TODO (ej) Devil's Advocate question: What happens if one of the handlers in the message bus fails?
//      How should you handle that?

[[repository_tracks_seen]]
.Repository tracks aggregates seen (src/allocation/repository.py)
====
[source,python]
----
class AbstractRepository(abc.ABC):

    def __init__(self):
        self.seen = set()  # type: Set[model.Product]  #<1>

    def add(self, product):  #<2>
        self._add(product)
        self.seen.add(product)

    def get(self, sku):  #<3>
        p = self._get(sku)
        if p:
            self.seen.add(p)
        return p

    @abc.abstractmethod
    def _add(self, product):  #<2>
        raise NotImplementedError

    @abc.abstractmethod  #<3>
    def _get(self, sku):
        raise NotImplementedError



class SqlAlchemyRepository(AbstractRepository):

    def __init__(self, session):
        super().__init__()
        self.session = session

    def _add(self, product):  #<2>
        self.session.add(product)

    def _get(self, sku):  #<3>
        return self.session.query(model.Product).filter_by(sku=sku).first()
----
====

<1> We initialise a set to store objects seen.  That means our implementations
    need to call `super().__init__()`

<2> The parent `add()` method adds things to `.seen`, and now requires subclasses
    to implement `._add()`

<3> Similarly, `.get()` delegates to a `._get()` function, to be implemented by
    subclasses, in order to capture objects seen.

Once the UoW and repository collaborate in this way to automatically keep
track of live objects and process their events, the service layer can now be
totally free of event-handling concerns:

////
(TODO ej) FWIW, my instinct on the above changes would be to do something like below. 
     This would avoid cascading changes to add _underscorey methods. (This
     might be a language idiom thing, though.  I don't think it's possible in Java/C#.)

class AbstractRepository():
    def add(self, product):
        self.seen.append(product)

class SqlAlchemyRepository(AbstractRepository):
    def add(self, product):
        super().add(product)
        self.session.add(product)
////


[[services_clean]]
.Service layer is clean again (src/allocation/services.py)
====
[source,python]
----
def allocate(
        orderid: str, sku: str, qty: int,
        uow: unit_of_work.AbstractUnitOfWork
) -> str:
    line = OrderLine(orderid, sku, qty)
    with uow:
        product = uow.products.get(sku=line.sku)
        if product is None:
            raise exceptions.InvalidSku(f'Invalid sku {line.sku}')
        batchref = product.allocate(line)
        uow.commit()
        return batchref
----
====


We do also have to remember to change the fakes in the service layer and make them
call `super()` in the right places, and implement underscorey methods, but the
changes are minimal:
////
TODO
In Example 12 we have to go back and update our FakeRepository object.
In a large project with many contributors, it feels to me that keeping these fakes in sync with the real objects might become an issue.
Do you guys have any strategies for dealing with that?
https://github.com/python-leap/book/issues/35
////
[[services_tests_ugly_fake_messagebus]]
.Service-layer fakes need tweaking. (tests/unit/test_services.py)
====
[source,python]
----
class FakeRepository(repository.AbstractRepository):

    def __init__(self, products):
        super().__init__()
        self._products = set(products)

    def _add(self, product):
        self._products.add(product)

    def _get(self, sku):
        return next((p for p in self._products if p.sku == sku), None)

...

class FakeUnitOfWork(unit_of_work.AbstractUnitOfWork):
    ...

    def _commit(self):
        self.committed = True

----
====


=== Unit Testing with a Fake Message Bus

TODO: discuss replacing @mock test with `FakeMessageBus`




=== Wrap-Up

TODO - wrap up for domain events chapter



.Recap: Domain Events and the Message Bus
*****************************************************************
Events can help with SRP::
    bla

A Message Bus maps Events to Handlers::
    bla

Option 1: Domain Model raises events, Service Layer passes them to Message Bus::
    bla

Option 2: Service Layer raises events and passes them to Message Bus::
    bla

Option 3: Unit of Work collects events from Aggregates and passes them to Message Bus::
    bla

*****************************************************************

[[chapter_07_events_and_message_bus_tradeoffs]]
[options="header"]
.Domain Events: The Trade-Offs
|===
|Pros|Cons
a|
* SRP

* Events = quite a nice way to model real life

a|
* message bus is weird.  
* the one we've presented is not async, so it can still, eg, hang your web
  responses, which prolly isn't what you're expecting.
* celery is _fine_.
|===
